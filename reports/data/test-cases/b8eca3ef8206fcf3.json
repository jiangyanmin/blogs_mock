{"uid":"b8eca3ef8206fcf3","name":"test_02_login[密码错误，登录失败]","fullName":"testcase.test_blogs_mock.TestCnblogs#test_02_login","historyId":"014ce7af6edaa8999edb97a49be401a2","time":{"start":1664986437102,"stop":1664986437102,"duration":0},"status":"failed","statusMessage":"AssertionError: assert {'msg': '用户名或密码错误！'} == '用户名或密码错误！'\n +  where {'msg': '用户名或密码错误！'} = <bound method Response.json of <Response [400]>>()\n +    where <bound method Response.json of <Response [400]>> = <Response [400]>.json","statusTrace":"self = <test_blogs_mock.TestCnblogs object at 0x0000020705E9C5B0>\nsend = <Response [400]>\n\n    @pytest.mark.smoke\n    @pytest.mark.parametrize('send',\n                             [(login_cases[1][\"method\"], login_cases[1][\"url\"],\n                               login_cases[1][\"data\"], login_cases[1][\"headers\"])],\n                             ids=[login_cases[1][\"describe\"]],\n                             indirect=True)\n    def test_02_login(self, send):\n        res = send\n        # print(res.json())\n        assert res.status_code == login_cases[1][\"res\"][\"status_code\"]\n>       assert res.json() == login_cases[1][\"res\"]['msg']\nE       AssertionError: assert {'msg': '用户名或密码错误！'} == '用户名或密码错误！'\nE        +  where {'msg': '用户名或密码错误！'} = <bound method Response.json of <Response [400]>>()\nE        +    where <bound method Response.json of <Response [400]>> = <Response [400]>.json\n\ntestcase\\test_blogs_mock.py:62: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"_session_faker","time":{"start":1664986436975,"stop":1664986437090,"duration":115},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"stepsCount":0,"hasContent":false},{"name":"clear","time":{"start":1664986437090,"stop":1664986437091,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"stepsCount":0,"hasContent":false},{"name":"_xunit_setup_class_fixture_TestCnblogs","time":{"start":1664986437091,"stop":1664986437091,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"stepsCount":0,"hasContent":false},{"name":"send","time":{"start":1664986437099,"stop":1664986437101,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"stepsCount":0,"hasContent":false}],"testStage":{"status":"failed","statusMessage":"AssertionError: assert {'msg': '用户名或密码错误！'} == '用户名或密码错误！'\n +  where {'msg': '用户名或密码错误！'} = <bound method Response.json of <Response [400]>>()\n +    where <bound method Response.json of <Response [400]>> = <Response [400]>.json","statusTrace":"self = <test_blogs_mock.TestCnblogs object at 0x0000020705E9C5B0>\nsend = <Response [400]>\n\n    @pytest.mark.smoke\n    @pytest.mark.parametrize('send',\n                             [(login_cases[1][\"method\"], login_cases[1][\"url\"],\n                               login_cases[1][\"data\"], login_cases[1][\"headers\"])],\n                             ids=[login_cases[1][\"describe\"]],\n                             indirect=True)\n    def test_02_login(self, send):\n        res = send\n        # print(res.json())\n        assert res.status_code == login_cases[1][\"res\"][\"status_code\"]\n>       assert res.json() == login_cases[1][\"res\"]['msg']\nE       AssertionError: assert {'msg': '用户名或密码错误！'} == '用户名或密码错误！'\nE        +  where {'msg': '用户名或密码错误！'} = <bound method Response.json of <Response [400]>>()\nE        +    where <bound method Response.json of <Response [400]>> = <Response [400]>.json\n\ntestcase\\test_blogs_mock.py:62: AssertionError","steps":[],"attachments":[{"uid":"4b434889e71f5b2a","name":"stdout","source":"4b434889e71f5b2a.txt","type":"text/plain","size":28}],"parameters":[],"shouldDisplayMessage":true,"attachmentsCount":1,"stepsCount":0,"hasContent":true},"afterStages":[{"name":"_xunit_setup_class_fixture_TestCnblogs::0","time":{"start":1664986437246,"stop":1664986437246,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"stepsCount":0,"hasContent":false}],"labels":[{"name":"tag","value":"smoke"},{"name":"parentSuite","value":"testcase"},{"name":"suite","value":"test_blogs_mock"},{"name":"subSuite","value":"TestCnblogs"},{"name":"host","value":"Millie"},{"name":"thread","value":"31788-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"testcase.test_blogs_mock"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"send","value":"('post', 'http://127.0.0.1:8888/login', {'name': 'Millie', 'password': '123'}, {'content-type': 'application/json'})"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"tags":["smoke"]},"source":"b8eca3ef8206fcf3.json","parameterValues":["('post', 'http://127.0.0.1:8888/login', {'name': 'Millie', 'password': '123'}, {'content-type': 'application/json'})"]}